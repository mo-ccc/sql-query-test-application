name: pipeline

on: push
    
jobs:
  test-suite:
    runs-on: ubuntu-latest

    services: # adding postgres to flow file for testing
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 2
        ports:
          # Maps tcp port 5432 on service to host
          - 5432:5432
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup python v3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ -f back-end/src/requirements.txt ]]; then pip install -r back-end/src/requirements.txt; fi
          
      - name: run unittest
        run: python -m unittest discover back-end/src/ -v
        env:
          FLASK_APP: main.py
          FLASK_ENV: testing
          DB_URI: postgres:postgres@localhost:5432/testdb
          HOSTNAME: localhost:5000

  s3-deployment:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v2
        
      - name: Install dependencies
        working-directory: ./front-end # change working directory to the react_app
        run: yarn install # initializes yarn

      - name: Build
        working-directory: ./front-end # change working directory to the react_app
        run: CI=false yarn build # builds the react app with warnings suppressed
        env:
          REACT_APP_HOST: ${{ secrets.REACT_APP_HOST }}

      - name: Deploy
        uses: reggionick/s3-deploy@v3
        with:
          folder: ./front-end/build
          bucket: sql-query-test-app.ml
          bucket-region: us-east-1
          delete-removed: true # will delete any files on s3 that aren't present in build
          private: true
  
  flask-app-deployment:
    needs: test-suite
    runs-on: ubuntu-latest
    steps:
      - name: SSH
        uses: appleboy/ssh-action@master
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST:  ${{ secrets.DB_HOST }}
          DB_PORT: 5432
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_USERNAME }}
          key: ${{ secrets.KEY }}
          envs: DB_NAME,DB_USERNAME,DB_PASSWORD,DB_HOST,DB_PORT
          script: |
            cd ~
            rm -rf sql-query-test-application
            git clone https://github.com/mo-ccc/sql-query-test-application.git
            cd ./sql-query-test-application/back-end/src
            python3 -m venv ./venv
            source ./venv/bin/activate
            pip install -r requirements.txt
            echo "DB_NAME=${DB_NAME}" >> .env
            echo "USERNAME=${DB_USERNAME}" >> .env
            echo "PASSWORD=${DB_PASSWORD}" >> .env
            echo "HOST=${DB_HOST}" >> .env
            echo "PORT=${DB_PORT}" >> .env
